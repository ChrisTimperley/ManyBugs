#!/usr/bin/env python
import sys
import os
import shutil
import subprocess
import errno


# https://stackoverflow.com/questions/600268/mkdir-p-functionality-in-python
def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

opts = sys.argv[1:]
obj_mode = '--obj' in opts
base_mode = '--base' in opts
option = '-save-temps=obj' if obj_mode else '-save-temps'


with open('/experiment/manifest.txt', 'r') as f:
  files = [fn.strip() for fn in f]

# destroy the current contents, if any, of the preprocessed directory
shutil.rmtree('/experiment/preprocessed', ignore_errors=True)
os.mkdir('/experiment/preprocessed')

# recompile
os.chdir('/experiment/src')
subprocess.check_call('./configure CFLAGS="{}"'.format(option), shell=True)
subprocess.check_call('make clean && make -j$(nproc)', shell=True)

# extract preprocessed files
for fn in files:
    fn_preprocessed = fn

    if base_mode:
        fn_preprocessed = os.path.basename(fn)

    # trim the suffix
    fn_preprocessed = fn_preprocessed.rpartition('.')[0]

    fn_preprocessed = os.path.join('/experiment/src/', fn_preprocessed + '.i')
    fn_dest = os.path.join('/experiment/preprocessed/', fn)

    # create necessary dirs
    mkdir_p(os.path.dirname(fn_dest))

    os.rename(fn_preprocessed, fn_dest)

# tidy up
subprocess.check_call('make clean', shell=True)
subprocess.check_call('./configure', shell=True)

for root, dirs, files in os.walk('/experiment/src'):
    for fn in files:
        if fn.endswith('.i') or fn.endswith('.s'):
            fn = os.path.join(root, fn)
            os.remove(fn)

# self-destruct
os.remove('/experiment/preprocess')
